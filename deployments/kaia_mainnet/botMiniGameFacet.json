{
  "address": "0x59D38894bAd93EB36641613e5DBfBE3efa071715",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "userId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "playDiceEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "userId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "playRouletteEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "userId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "elementaId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "userLevel",
          "type": "uint256"
        }
      ],
      "name": "userUpgrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "widthdrawElementaToken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "calculateHeartPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "calculateHeartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userId",
          "type": "string"
        }
      ],
      "name": "elementaUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userId",
          "type": "string"
        }
      ],
      "name": "getDiceRandomValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getElementa20Info",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userId",
          "type": "string"
        }
      ],
      "name": "getRouletteRandomValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userId",
          "type": "string"
        }
      ],
      "name": "isLevelUp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "playDice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "playRoulette",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x22d2784cc5ed5fa31c5b0f7a33252672d8bca0372268019de08d49eda5de4879",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x12920802d981ac6F5A33dA158738756BDb3B1f9B",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1527206",
    "logsBloom": "0x
    "blockHash": "0x704ec684d32dc35c386676d63533327149bb179273e8d00aa13687413befbd97",
    "transactionHash": "0x22d2784cc5ed5fa31c5b0f7a33252672d8bca0372268019de08d49eda5de4879",
    "logs": [],
    "blockNumber": 167953290,
    "cumulativeGasUsed": "1527206",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 83,
  "solcInputHash": "05c3754d0a30151decb018b1b1601ae3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"playDiceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"playRouletteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"elementaId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userLevel\",\"type\":\"uint256\"}],\"name\":\"userUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"widthdrawElementaToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"calculateHeartPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"calculateHeartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"elementaUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"getDiceRandomValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElementa20Info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"getRouletteRandomValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"isLevelUp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"playDice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"playRoulette\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"playDiceEvent(string,uint256)\":{\"notice\":\"token preDistribution functions\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/elementa/botMiniGameFacet.sol\":\"botMiniGameFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/elementa/botMiniGameFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\nimport {modifiersFacet} from \\\"../shared/utils/modifiersFacet.sol\\\";\\nimport {IERC721} from \\\"../shared/interfaces/IERC721.sol\\\";\\nimport {IERC20} from \\\"../shared/interfaces/IERC20.sol\\\";\\nimport {User,ElementaToken, ElementaNFT, DelegateEOA} from \\\"../shared/storage/structs/AppStorage.sol\\\";\\nimport {UintQueueLibrary} from \\\"../shared/libraries/LibUintQueueLibrary.sol\\\";\\nimport {LibVRF} from \\\"../shared/libraries/LibVRF.sol\\\";\\nimport {IOraklVRF} from \\\"../shared/interfaces/IOraklVRF.sol\\\";\\n\\ncontract botMiniGameFacet is modifiersFacet {\\n    using UintQueueLibrary for UintQueueLibrary.UintQueue;\\n    /**\\n     * @notice token preDistribution functions\\n     */\\n\\n    event playDiceEvent(string indexed userId, uint indexed result);\\n    event playRouletteEvent(string indexed userId, uint indexed result);\\n    event widthdrawElementaToken(\\n        address indexed userAddress,\\n        uint indexed amount\\n    );\\n    event userUpgrade(string indexed userId, uint indexed elementaId,uint indexed userLevel);\\n\\n    function getElementa20Info() public view returns (uint, uint, uint) {}\\n\\n    function calculateHeartPoint(uint _nftId) public view returns (uint) {\\n        ElementaNFT memory nft = s.elementaNFTs[_nftId];\\n        if (nft.heartPoint == nft.heartMax) {\\n            return nft.heartPoint;\\n        }\\n\\n        uint elapsedTime = block.timestamp - nft.updateHeartTime;\\n        uint pointToAdd = elapsedTime / 30 minutes;\\n\\n        if (nft.heartPoint + pointToAdd >= nft.heartMax) {\\n            return nft.heartMax;\\n        } else {\\n            return nft.heartPoint + pointToAdd;\\n        }\\n    }\\n\\n    function calculateHeartTime(uint _nftId) external view returns (uint) {\\n        ElementaNFT memory nft = s.elementaNFTs[_nftId];\\n\\n        uint elapsedTime = block.timestamp - nft.updateHeartTime;\\n        uint pointToAdd = elapsedTime / 30 minutes;\\n\\n        if (nft.heartPoint + pointToAdd >= nft.heartMax) {\\n            return 0;\\n        } else {\\n              uint nextHeartTime = 30 minutes -\\n            (elapsedTime - (pointToAdd * 30 minutes));\\n        return nextHeartTime;\\n        }\\n    }\\n\\n    function _updateHeartPoints(uint _nftId) internal {\\n        ElementaNFT storage nft = s.elementaNFTs[_nftId];\\n\\n        nft.heartPoint = calculateHeartPoint(_nftId);\\n        nft.updateHeartTime = block.timestamp;\\n    }\\n\\n    // using orakl - VRF function\\n    function _generateResultVRF(uint _maxPoint) internal view returns (uint) {\\n        //\\n        //\\n    }\\n\\n    // invitee user can increase heart point\\n    function _increaseHeart(uint _nftId) internal {\\n        ElementaNFT storage nft = s.elementaNFTs[_nftId];\\n        _updateHeartPoints(_nftId);\\n        require(\\n            nft.delegateAddress == msg.sender,\\n            \\\"only delegateEOA can increase heart\\\"\\n        );\\n\\n        if (nft.heartPoint == nft.heartMax) {\\n            nft.plusHeartPoint++;\\n        } else {\\n            nft.heartPoint++;\\n        }\\n    }\\n\\n    function _increaseElementaPoint(uint _nftId, uint _point) internal {\\n        ElementaNFT storage nft = s.elementaNFTs[_nftId];\\n        nft.elementaPoint += _point;\\n    }\\n\\n    \\n\\n\\n    function isLevelUp(string memory _userId) public view returns (bool) {\\n        \\n        uint currentLevel = s.elementaNFTs[s.userIndex[_userId]].level;\\n        uint currentExp = s.elementaNFTs[s.userIndex[_userId]].exp;\\n        uint maxLevel = 10;\\n        \\n        if(s.levelInfos[currentLevel+1].requireExp <= currentExp && maxLevel > currentLevel) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function elementaUpgrade(string memory _userId) external onlyDelegateEOA  {\\n        require(isLevelUp(_userId), \\\"Not enough exp\\\");\\n        IERC721 elementaNFT = IERC721(s.contracts[\\\"nft\\\"]);\\n        \\n        uint nextLevel = s.elementaNFTs[s.userIndex[_userId]].level + 1;\\n        s.levelInfos[nextLevel].levelUserCount += 1;\\n        // s.levelInfos[nextLevel-1].levelUserCount -= 1;\\n\\n        s.elementaNFTs[s.userIndex[_userId]].level = nextLevel;\\n\\n        s.elementaNFTs[s.userIndex[_userId]].heartMax = s.levelInfos[nextLevel].heartMax;\\n        s.elementaNFTs[s.userIndex[_userId]].heartPoint = s.levelInfos[nextLevel].heartMax;\\n        s.elementaNFTs[s.userIndex[_userId]].updateHeartTime = block.timestamp;\\n\\n        elementaNFT._update_metadata_uri(s.userIndex[_userId]);\\n        \\n        emit userUpgrade(_userId, s.userIndex[_userId], nextLevel);\\n    }\\n\\n\\n\\n    function playDice(string memory _userId, uint _amount) external onlyDelegateEOA returns(uint){    \\n        _updateHeartPoints(s.userIndex[_userId]);\\n        ElementaToken storage token = s.elementaToken[1];\\n        ElementaNFT storage nft = s.elementaNFTs[s.userIndex[_userId]];\\n        require(\\n            nft.heartPoint > 0 ||\\n                nft.plusHeartPoint > 0 ,\\n            \\\"Not enough heart points\\\"\\n        );\\n        // require(\\n        // token.mintedSupply + (6 * 1e19) <\\n        //         token.phaseMaxSupply,\\n        //     \\\"Not enough balance\\\"\\n        // );\\n\\n        if (nft.plusHeartPoint > 0) {\\n            nft.plusHeartPoint -= 1;\\n        } else {\\n            nft.heartPoint -= 1;\\n            nft.updateHeartTime = block.timestamp;\\n        }\\n\\n\\n        uint randomValue = LibVRF.resVRFDice(_userId);\\n        uint getReward = randomValue * 1e19;\\n        nft.exp += 10;\\n        nft.elementaPoint += getReward;\\n        token.mintedSupply += getReward;\\n        \\n        IERC721 elementaNFT = IERC721(s.contracts[\\\"nft\\\"]);\\n        elementaNFT._update_metadata_uri(s.userIndex[_userId]);\\n\\n        emit playDiceEvent(_userId, getReward);\\n\\n        return getReward;\\n    }\\n    \\n    function playRoulette(string memory _userId, uint _amount) external onlyDelegateEOA returns(uint){    \\n        _updateHeartPoints(s.userIndex[_userId]);\\n        ElementaToken storage token = s.elementaToken[1];\\n        ElementaNFT storage nft = s.elementaNFTs[s.userIndex[_userId]];\\n        \\n        \\n    \\n        require(\\n            nft.heartPoint >= 3 ||\\n                nft.plusHeartPoint >= 3 ,\\n            \\\"Not enough heart points\\\"\\n        );\\n        // require(\\n        // token.mintedSupply + (64 * 1e19) <\\n        //         token.phaseMaxSupply,\\n        //     \\\"Not enough balance\\\"\\n        // );\\n\\n        if (nft.plusHeartPoint > 3) {\\n            nft.plusHeartPoint -= 3;\\n        } else {\\n            nft.heartPoint -= 3;\\n            nft.updateHeartTime = block.timestamp;\\n        }\\n\\n        // min 1 ~ 64 random value\\n        uint randomValue = LibVRF.resVRFRoulette(_userId);\\n\\n        uint getReward = randomValue * 1e19;\\n        \\n        nft.exp += 30;\\n        nft.elementaPoint += getReward;\\n        token.mintedSupply += getReward;\\n        \\n        IERC721 elementaNFT = IERC721(s.contracts[\\\"nft\\\"]);\\n        elementaNFT._update_metadata_uri(s.userIndex[_userId]);\\n\\n        emit playRouletteEvent(_userId, getReward);\\n\\n        return getReward;\\n    }\\n\\n    function getRouletteRandomValue(string memory _userId) external view returns(uint) {\\n        IOraklVRF oraklVRF = IOraklVRF(address(0xA1b9Be3dEc8612e727564Baf46387c4366912d74));\\n        return oraklVRF.resRandomValues(oraklVRF.userIdToRequestId(_userId).requestId, oraklVRF.userIdToRequestId(_userId).tryIndex);\\n    }\\n\\n    function getDiceRandomValue(string memory _userId) external view returns(uint) {\\n        IOraklVRF oraklVRF = IOraklVRF(address(0xF1A9564396F0d27FC61bA2E0E0938Dc0995D4223));\\n        return oraklVRF.resRandomValues(oraklVRF.userIdToRequestId(_userId).requestId, oraklVRF.userIdToRequestId(_userId).tryIndex);\\n    }\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x8ea9cd91e40340ff77206759d88f702bd4f35f384aecd9b81b9ad038d58a8549\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb1f741842fb81b560a48d0f336a76158be014fb7b3814b213a474c21f973a265\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n//import \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\n/* interface IERC721 is IERC165 { */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function burn(uint256 _tokenId) external;\\n\\n    function safeMintByMinter(address _to) external;\\n\\n    function nextTokenId() external view returns (uint256);\\n\\n    function safeMint(address to, string memory uri) external returns (uint);\\n\\n    function diamondMint(address to, uint256 tokenId) external;\\n\\n    function _update_metadata_uri(uint _tokenId) external;\\n}\\n\",\"keccak256\":\"0x18d232d75aa97fdfb847fdbb81ff03edee03771c8233541b0dd84b41b34fe307\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IOraklVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IOraklVRF {\\n    struct userRandomValue{ \\n        uint requestId;\\n        uint8 tryIndex;\\n    }\\n\\n    function sRandomWords() external view returns (uint256);\\n\\n    function VRFCall(\\n        bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external returns (uint[] memory);\\n    function requestRandomWords(bytes32 keyHash,\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint32 numWords) external returns(uint);\\n\\n    // Roulette\\n    function elementaVRFCall(string memory _userId) external returns(uint);\\n    function userIdToRequestId(string memory) external view returns(userRandomValue memory); \\n    function resRandomValues(uint _requestKey, uint _index) external view returns(uint);\\n\\n}\\n\",\"keccak256\":\"0x9327861817c865c41f3954ac7fe6292a22c8485c85bf0c819a83e1fe0da2e75e\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x32804b629ea56692e6458dcaf1a4998c62ef289b071fe2690be171b25926f495\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibUintQueueLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary UintQueueLibrary {\\n    struct UintQueue {\\n        uint256[] data;\\n    }\\n\\n    // Add an element to the front of the queue\\n    function addFront(UintQueue storage queue, uint256 element) internal {\\n        queue.data.push(element); // Add element at the end\\n        uint256 len = queue.data.length;\\n        for (uint256 i = len - 1; i > 0; i--) {\\n            queue.data[i] = queue.data[i - 1];\\n        }\\n        queue.data[0] = element; // Move element to the front\\n    }\\n\\n    // Add an element to the back of the queue\\n    function addBack(UintQueue storage queue, uint256 element) internal {\\n        queue.data.push(element);\\n    }\\n\\n    // Add an element to the middle of the queue at the specified index\\n    function addMiddle(\\n        UintQueue storage queue,\\n        uint256 element,\\n        uint256 index\\n    ) internal {\\n        require(index <= queue.data.length, \\\"Index out of bounds\\\");\\n\\n        queue.data.push(element); // Add element at the end\\n        for (uint256 i = queue.data.length - 1; i > index; i--) {\\n            queue.data[i] = queue.data[i - 1];\\n        }\\n        queue.data[index] = element; // Move element to the middle\\n    }\\n\\n    // Remove an element from the front of the queue\\n    function removeFront(UintQueue storage queue) internal returns (uint256) {\\n        require(queue.data.length > 0, \\\"Queue is empty\\\");\\n\\n        uint256 element = queue.data[0];\\n        for (uint256 i = 0; i < queue.data.length - 1; i++) {\\n            queue.data[i] = queue.data[i + 1];\\n        }\\n        queue.data.pop();\\n        return element;\\n    }\\n\\n    // Remove an element from the back of the queue\\n    function removeBack(UintQueue storage queue) internal returns (uint256) {\\n        require(queue.data.length > 0, \\\"Queue is empty\\\");\\n\\n        uint256 element = queue.data[queue.data.length - 1];\\n        queue.data.pop();\\n        return element;\\n    }\\n\\n    // Remove an element from the middle of the queue at the specified index\\n    function removeMiddle(\\n        UintQueue storage queue,\\n        uint256 index\\n    ) internal returns (uint256) {\\n        require(index < queue.data.length, \\\"Index out of bounds\\\");\\n\\n        uint256 element = queue.data[index];\\n        for (uint256 i = index; i < queue.data.length - 1; i++) {\\n            queue.data[i] = queue.data[i + 1];\\n        }\\n        queue.data.pop();\\n        return element;\\n    }\\n\\n    // Get the element at the front of the queue\\n    function front(UintQueue storage queue) internal view returns (uint256) {\\n        require(queue.data.length > 0, \\\"Queue is empty\\\");\\n        return queue.data[0];\\n    }\\n\\n    // Get the element at the back of the queue\\n    function back(UintQueue storage queue) internal view returns (uint256) {\\n        require(queue.data.length > 0, \\\"Queue is empty\\\");\\n        return queue.data[queue.data.length - 1];\\n    }\\n\\n    // Check if the queue is empty\\n    function isEmpty(UintQueue storage queue) internal view returns (bool) {\\n        return queue.data.length == 0;\\n    }\\n\\n    // Get the number of elements in the queue\\n    function length(UintQueue storage queue) internal view returns (uint256) {\\n        return queue.data.length;\\n    }\\n\\n    // Get the element at a specific index in the queue\\n    function get(\\n        UintQueue storage queue,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        require(index < queue.data.length, \\\"Index out of bounds\\\");\\n        return queue.data[index];\\n    }\\n\\n    // Get the elements from the specified range of indices in the queue\\n    function getRange(\\n        UintQueue storage queue,\\n        uint256 fromIndex,\\n        uint256 toIndex\\n    ) internal view returns (uint256[] memory) {\\n        require(fromIndex <= toIndex, \\\"Invalid index range\\\");\\n        require(toIndex < queue.data.length, \\\"Index out of bounds\\\");\\n\\n        uint256 length = toIndex - fromIndex + 1;\\n        uint256[] memory range = new uint256[](length);\\n        for (uint256 i = fromIndex; i <= toIndex; i++) {\\n            range[i - fromIndex] = queue.data[i];\\n        }\\n        return range;\\n    }\\n\\n    // Get the elements from the specified range of indices in the queue in reverse order\\n    function getRangeReverse(\\n        UintQueue storage queue,\\n        uint256 fromIndex,\\n        uint256 toIndex\\n    ) internal view returns (uint256[] memory) {\\n        require(fromIndex <= toIndex, \\\"Invalid index range\\\");\\n        require(toIndex < queue.data.length, \\\"Index out of bounds\\\");\\n\\n        uint256 length = toIndex - fromIndex + 1;\\n        uint256[] memory range = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            range[i] = queue.data[toIndex - i];\\n        }\\n        return range;\\n    }\\n\\n    function findIndex(\\n        UintQueue storage queue,\\n        uint256 element\\n    ) internal view returns (int256) {\\n        for (uint256 i = 0; i < queue.data.length; i++) {\\n            if (queue.data[i] == element) {\\n                return int256(i);\\n            }\\n        }\\n        return -1; // Return -1 if the element is not found\\n    }\\n\\n    function removeElement(\\n        UintQueue storage queue,\\n        uint256 element\\n    ) internal returns (bool) {\\n        int256 index = findIndex(queue, element);\\n        if (index == -1) {\\n            return false; // Element not found\\n        }\\n\\n        for (uint256 i = uint256(index); i < queue.data.length - 1; i++) {\\n            queue.data[i] = queue.data[i + 1];\\n        }\\n        queue.data.pop();\\n        return true;\\n    }\\n}\",\"keccak256\":\"0xfaf62c6946571c760902ae7ae76bf446b2ead79abe69b1e828063413e7459480\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibVRF.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage} from \\\"../storage/facets/AppStorageFacet.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport {IOraklVRF} from \\\"../interfaces/IOraklVRF.sol\\\";\\n\\nlibrary LibVRF {\\n    \\n    address constant VRF_ORAKL = address(0x2974e0bF1a353EB0cB1a7093f1754854dB3ff5a7);\\n    bytes32 constant VRF_KEYHASH = 0x6cff5233743b3c0321a19ae11ab38ae0ddc7ddfe1e91b162fa8bb657488fb157;\\n    address constant VRF_ORAKL_ROULETTE = address(0xA1b9Be3dEc8612e727564Baf46387c4366912d74);\\n    address constant VRF_ORAKL_DICE = address(0xF1A9564396F0d27FC61bA2E0E0938Dc0995D4223);\\n\\n    function reqVRF(uint32 _numbWords) internal returns (uint[] memory) {\\n        IOraklVRF oraklVRF = IOraklVRF(VRF_ORAKL);\\n        return oraklVRF.VRFCall(\\n            VRF_KEYHASH,\\n            28,\\n            200000,\\n            _numbWords\\n        );\\n    }\\n\\n    function resVRF() internal view returns (uint) {\\n        IOraklVRF oraklVRF = IOraklVRF(VRF_ORAKL_ROULETTE);\\n        return oraklVRF.sRandomWords();\\n     \\n    }\\n\\n    function reqVRFRoulette() internal returns (uint) {\\n        IOraklVRF oraklVRF = IOraklVRF(VRF_ORAKL_ROULETTE);\\n        return oraklVRF.requestRandomWords(\\n            VRF_KEYHASH,\\n            28,\\n            200000,\\n            1\\n        );\\n    }\\n\\n    function resVRFRoulette(string memory _userId) internal returns (uint) {\\n        IOraklVRF oraklVRF = IOraklVRF(VRF_ORAKL_ROULETTE);\\n        return oraklVRF.elementaVRFCall(_userId);\\n    }\\n\\n\\n    function resVRFDice(string memory _userId) internal returns (uint) {\\n        IOraklVRF oraklVRF = IOraklVRF(VRF_ORAKL_DICE);\\n        return oraklVRF.elementaVRFCall(_userId);\\n    }\\n}\\n \\n\",\"keccak256\":\"0xf042f35fefb7adbf8f41c0714dbbe422ff4aa976e77ddd64e886d42e58810508\",\"license\":\"UNLICENSED\"},\"contracts/shared/storage/facets/AppStorageFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { LibDiamond } from \\\"../../libraries/LibDiamond.sol\\\";\\n\\nimport \\\"../structs/AppStorage.sol\\\";\\n\\ncontract AppStorageFacet {\\n    AppStorage internal s;\\n\\n    function appStorage() internal pure returns (AppStorage storage ds){\\n      assembly {\\n        ds.slot := 0\\n      }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4fc8740714087b364e0f5125354c6203641fc39df7e8ba9eeee4a921bb8146a5\",\"license\":\"MIT\"},\"contracts/shared/storage/structs/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"../../libraries/LibEnumerableSet.sol\\\";\\nimport {UintQueueLibrary} from \\\"../../libraries/LibUintQueueLibrary.sol\\\";\\nimport {UserType, EquipmentType} from \\\"./NftStorage.sol\\\";\\n\\nusing EnumerableSet for EnumerableSet.UintSet;\\nusing UintQueueLibrary for UintQueueLibrary.UintQueue;\\n\\nstruct User {\\n    string userId;\\n    uint nftId;\\n    address reciveAddress;\\n    address delegateEOA;\\n    UserType userType;\\n    //\\n    string refferalId;\\n    uint refferalCount;\\n}\\nstruct DelegateEOA {\\n    uint userIndex;\\n    string userId;\\n    address connectAddress;\\n    bool isOwnNFT;\\n}\\n\\nstruct levelInfo {\\n    uint level;\\n    uint requireExp;\\n    uint levelUserCount;\\n    uint heartMax;\\n}\\n\\nstruct ElementaNFT {\\n    address ownerAddress;\\n    address delegateAddress;\\n    string nickName;\\n    uint grade;\\n    uint level;\\n    uint exp;\\n    uint heartMax;\\n    uint heartPoint;\\n    uint plusHeartPoint;\\n    uint updateHeartTime;\\n    uint elementaPoint;\\n    // from VRF, origin random value\\n    uint originRandomValue;\\n    // uint[10] _gap;\\n    // uint[10] equipmentItem;\\n}\\n\\nstruct MysteryBox {\\n    uint boxId;\\n    uint uniqValue;\\n}\\nstruct ElementaItem {\\n    EquipmentType equipmentType;\\n    uint itemId;\\n    string name;\\n    string svgUri;\\n    string animateColors;\\n    string stopColor;\\n    string animateDuration;\\n}\\n\\nstruct ElementaToken {\\n    uint phaseMaxSupply;\\n    uint mintedSupply;\\n}\\n\\nstruct OraklVRF {\\n    bytes32 keyHash;\\n    uint64 accId;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n}\\n\\nstruct AppStorage {\\n    mapping(string => address) contracts;\\n    mapping(string => User) users;\\n    uint globalUserIndex;\\n    mapping(string => uint) userIndex;\\n    // delegate EOA Info\\n    mapping(address => DelegateEOA) delegateEOAs;\\n    // NFT Info\\n    // nftId(userIndex) => ElementaNFT\\n    mapping(uint => ElementaNFT) elementaNFTs;\\n    mapping(uint => levelInfo) levelInfos;\\n    mapping(address => bool) isDelegateEOA;\\n    //\\n    // items info\\n    mapping(uint => ElementaItem) elementaItems;\\n    //\\n    // nftId => item info\\n    mapping(uint => uint[10]) equipItems;\\n    mapping(uint => ElementaToken) elementaToken;\\n    // Orakl VRF\\n    OraklVRF oraklVRF;\\n\\n    mapping(uint => MysteryBox) mysteryBoxes;\\n\\n    \\n    // SVGs\\n    // mapping(uint => GradeOutline) gradeOutlines;\\n    // mapping(uint => BackGround) backgrounds;\\n}\\n\",\"keccak256\":\"0xf7c625173c23ab6aad4c840bd90cf16868e6eee290dcac9382a40ee500a9d229\",\"license\":\"MIT\"},\"contracts/shared/storage/structs/NftStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// pragma solidity ^0.8.0;\\n\\nenum EquipmentType {\\n    None,\\n    TierOutline, // grade\\n    Background,\\n    Head,\\n    Eyes,\\n    Mouth,\\n    Body,\\n    Hand,\\n    Pet,\\n    Badge\\n}\\n\\nenum AbilityType {\\n    Luck\\n    // ...\\n    // ...\\n    // ...\\n}\\n\\nenum UserType {\\n    Wallet,\\n    Telegram,\\n    Line\\n}\\nstruct Inventory {\\n    // nft status inventory\\n    uint[10] equipmentItem;\\n    uint[10] ability;\\n}\\n\\nstruct ElementaItem {\\n    EquipmentType equipmentType;\\n    uint itemId;\\n    string name;\\n    bytes uri;\\n}\\n\",\"keccak256\":\"0x88cd4777c51f3fcd6ac91de730873f69f31bd0be0b84c11ae4ca97114c2b6380\",\"license\":\"UNLICENSED\"},\"contracts/shared/utils/modifiersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport {AppStorage} from \\\"../storage/facets/AppStorageFacet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract modifiersFacet {\\n    AppStorage internal s;\\n\\n    modifier onlyAdmin() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    modifier onlyDelegateEOA() {\\n        require(\\n            s.delegateEOAs[msg.sender].userIndex != 0,\\n            \\\"ModifiersFacet: not delegate EOA\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyEOA(address _address) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_address)\\n        }\\n        \\n        require(size == 0, \\\"ModifiersFacet: not EOA\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd269722238f867d2696a6f1d91d0d0f4c320148aed2f2ebfaf17b7f1bf99102c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611313908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c90816319bb8b7414610bb45781632f59339c14610a895781633c7a43d8146107dc5781634f3b71bb146107bc578163ae7fd84414610535578163b50ef6fc1461050b578163cdb87ca81461024c578163d05cccc6146100ae575063d41bde101461008657600080fd5b346100aa57816003193601126100aa57606091815191818352816020840152820152f35b5080fd5b8383346100aa576020928360031936011261024857803567ffffffffffffffff8111610244576100e19036908301610c63565b825163a9ee45c160e01b8082529091826100fd82868301610e2e565b0392858173a1b9be3dec8612e727564baf46387c4366912d749581875afa90811561023a5791869161014493899161021d575b505193825193849283928352888301610e2e565b0381865afa908115610213579160ff8880959361018f97958a916101e6575b5001518751631e74a30360e01b81529485019283521660ff166020820152919384928391829160400190565b03915afa9283156101db57926101a7575b5051908152f35b9091508281813d83116101d4575b6101bf8183610c41565b810103126101cf575190836101a0565b600080fd5b503d6101b5565b8251903d90823e3d90fd5b6102069150893d8b1161020c575b6101fe8183610c41565b810190610de9565b8b610163565b503d6101f4565b85513d88823e3d90fd5b6102349150833d851161020c576101fe8183610c41565b8a610130565b86513d89823e3d90fd5b8380fd5b8280fd5b839150346100aa5761025d36610cba565b5092338352602093828552610276828520541515610e5a565b815161029f82519187818186019461028f818388610cec565b81016003815203019020546112b9565b60018552600a8652828520938351878185516102bc818388610cec565b81016003815203019020548652600587528386209460078601805480158015906104fe575b6102ea90611086565b600888018054909290156104e457505080546000198101919082116104d157555b84516330bf93dd60e01b81529588878061032788878301610e2e565b03818b73f1a9564396f0d27fc61ba2e0e0938dc0995d42235af19687156104c7578897610498575b50678ac7230489e80000968781029781890414901517156104855760058101805490600a82018092116104725791600a91600194935501610391888254610d0f565b90550161039f868254610d0f565b90556103d4878551621b999d60ea1b8152886003820152602360018060a01b0391205416938651809381928851928391610cec565b810160038152030190205490823b1561046e5790602487928387519586948593630ad4782960e31b85528401525af1801561046457849392918691610449575b50506104407fbde6b358268687a57a765fca97482d5e6bdf1d9c90394a7cc6de65ae723f9b0191610ea5565b91519480a38152f35b6104569192939450610bfa565b610244579082918487610414565b83513d87823e3d90fd5b8680fd5b634e487b7160e01b8a526011855260248afd5b634e487b7160e01b885260118352602488fd5b9096508881813d83116104c0575b6104b08183610c41565b810103126101cf5751958961034f565b503d6104a6565b86513d8a823e3d90fd5b634e487b7160e01b895260118452602489fd5b600019820192509082116104d1575542600987015561030b565b50600888015415156102e1565b828434610532576020366003190112610532575061052b602092356110d2565b9051908152f35b80fd5b839150346100aa5761054636610cba565b509233835260209382855261055f828520541515610e5a565b815181519361058b87840195610576818589610cec565b830192888160039586815203019020546112b9565b60018652600a8752838620948451888186516105a8818387610cec565b81018681520301902054875260058852848720956007870180548581108015906107ae575b6105d690611086565b600889019186835411600014610794575050805460021981019190821161047257555b85516330bf93dd60e01b81529689888061061589888301610e2e565b03818c73a1b9be3dec8612e727564baf46387c4366912d745af197881561078a57899861075b575b50678ac7230489e800009788810298818a0414901517156104d15760058101805490601e82018092116107485792600a6106c295936001938e9655016106848b8254610d0f565b905501610692898254610d0f565b90558651621b999d60ea1b81528986820152602360018060a01b0391205416948751809481938951928391610cec565b8201908152030190205490823b1561046e5790602487928387519586948593630ad4782960e31b85528401525af180156104645784939291869161072d575b50506104407f3bac9bae425cf10b911f766ffeda5040c2214cb2771df506a19a97c67a50100991610ea5565b61073a9192939450610bfa565b610244579082918487610701565b634e487b7160e01b8b526011865260248bfd5b9097508981813d8311610783575b6107738183610c41565b810103126101cf5751968a61063d565b503d610769565b87513d8b823e3d90fd5b6002198201925090821161047257554260098801556105f9565b5060088901548611156105cd565b828434610532576020366003190112610532575061052b60209235610ed2565b919050346102485760208060031936011261024457823567ffffffffffffffff8111610a855761080f9036908501610c63565b91338552838252610824818620541515610e5a565b61082d83610d32565b15610a53578051621b999d60ea1b815260038082018790526023909120548251855185870194926001600160a01b031691908690829061086e81838a610cec565b810186815203019020548852600585528682892001549660018801809811610a4057878952600686526002838a200180549060018201809211610a2d57908a929155835187818a516108c181838c610cec565b810188815203019020548252600587528881858420015588825260068752848483200154845188818b516108f681838d610cec565b810189815203019020548352600588526006858420015588825260068752848483200154845188818b5161092b81838d610cec565b8101898152030190205483526005885260078584200155835187818a5161095381838c610cec565b810188815203019020548252600587524260098584200155835187818a5161097c81838c610cec565b8101888152030190205490833b15610248576024908386519586948593630ad4782960e31b85528401525af18015610a2357610a04575b50916109dd93916109cd9351809481938851928391610cec565b8201908152030190205491610ea5565b7f6b95a864619128204031150d0af28bc7f123caefdc26282fb432d0de806c2dc98480a480f35b916109cd939197610a186109dd9694610bfa565b9791935091936109b3565b82513d8a823e3d90fd5b634e487b7160e01b8b526011835260248bfd5b634e487b7160e01b895260119052602488fd5b5162461bcd60e51b81529283015250600e60248201526d04e6f7420656e6f756768206578760941b6044820152606490fd5b8480fd5b8383346100aa576020928360031936011261024857803567ffffffffffffffff811161024457610abc9036908301610c63565b825163a9ee45c160e01b808252909182610ad882868301610e2e565b0392858173f1a9564396f0d27fc61ba2e0e0938dc0995d42239581875afa90811561023a57918691610b1e93899161021d57505193825193849283928352888301610e2e565b0381865afa908115610213579160ff88809593610b6897958a916101e6575001518751631e74a30360e01b81529485019283521660ff166020820152919384928391829160400190565b03915afa9283156101db578093610b82575b505051908152f35b909192508382813d8311610bad575b610b9b8183610c41565b81010312610532575051908380610b7a565b503d610b91565b8284346105325760203660031901126105325782359067ffffffffffffffff82116105325750610bec602093610bf192369101610c63565b610d32565b90519015158152f35b67ffffffffffffffff8111610c0e57604052565b634e487b7160e01b600052604160045260246000fd5b610180810190811067ffffffffffffffff821117610c0e57604052565b90601f8019910116810190811067ffffffffffffffff821117610c0e57604052565b81601f820112156101cf5780359067ffffffffffffffff8211610c0e5760405192610c98601f8401601f191660200185610c41565b828452602083830101116101cf57816000926020809301838601378301015290565b60406003198201126101cf576004359067ffffffffffffffff82116101cf57610ce591600401610c63565b9060243590565b60005b838110610cff5750506000910152565b8181015183820152602001610cef565b91908201809211610d1c57565b634e487b7160e01b600052601160045260246000fd5b60405190805191610d8060208281809481870197610d5181838b610cec565b810160038152030190205494600095865260058252600460408720015494604051938492839251928391610cec565b810160038152030190205483526005815260056040842001549060018301808411610dd557845260069052604083206001015411159081610dca575b50610dc45790565b50600190565b9050600a1138610dbc565b634e487b7160e01b85526011600452602485fd5b908160409103126101cf5760405190604082019082821067ffffffffffffffff831117610c0e5760209160405280518352015160ff811681036101cf57602082015290565b60409160208252610e4e8151809281602086015260208686019101610cec565b601f01601f1916010190565b15610e6157565b606460405162461bcd60e51b815260206004820152602060248201527f4d6f6469666965727346616365743a206e6f742064656c656761746520454f416044820152fd5b610ebd90602060405192828480945193849201610cec565b810103902090565b91908203918211610d1c57565b6000908152602060058152604082209160405191610eef83610c24565b60018060a01b0391828554168452600192600186015416828501526002850160405193828254928360011c9360018116801561107c575b8786108114611068578589528896959493929181156110445750600114611007575b50505050610f5892500382610c41565b60408201526003820154606082015260048201546080820152600582015460a082015260068201549160c082019280845260078201549060e08401938285526008840154610100820152610160600b60098601549586610120850152600a810154610140850152015491015281146110005750610fd86107089142610ec5565b0490610fe5828251610d0f565b835111610ff25750505190565b610ffd925051610d0f565b90565b9250505090565b815285812095935091905b81831061102c575050610f58935082010138808080610f48565b85548784018501529485019486945091830191611012565b9350505050610f5894925060ff191682840152151560051b82010138808080610f48565b634e487b7160e01b84526022600452602484fd5b94607f1694610f26565b1561108d57565b60405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820686561727420706f696e74730000000000000000006044820152606490fd5b6000908152602090600582526040812091604051906110f082610c24565b83546001600160a01b03908116835260018581015490911683830152604051600286018054919392869280821c929080831680156112af575b868510811461129b578488528795949392918115611279575060011461123c575b50505061115992500382610c41565b60408201526003830154606082015260048301546080820152600583015460a08201526111cc60068401549360c0830194855260078101549260e081019384526008820154610100820152610160600b60098401549384610120850152600a810154610140850152015491015242610ec5565b610708936111de858304809451610d0f565b9051116111ec575050905090565b83820291808304851490151715611228579061120791610ec5565b8203918211611214575090565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b83526011600452602483fd5b88528488209492508791905b818310611261575050611159935082010138808061114a565b85548784018501529485019486945091830191611248565b9250505061115994925060ff191682840152151560051b82010138808061114a565b634e487b7160e01b8a52602260045260248afd5b93607f1693611129565b8060005260056020526112d0604060002091610ed2565b600782015560094291015556fea26469706673582212208edc47d14e54a2c6b14d73df90895e823d31f8462027a8a7e8b54f5e1f6d223364736f6c63430008180033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c90816319bb8b7414610bb45781632f59339c14610a895781633c7a43d8146107dc5781634f3b71bb146107bc578163ae7fd84414610535578163b50ef6fc1461050b578163cdb87ca81461024c578163d05cccc6146100ae575063d41bde101461008657600080fd5b346100aa57816003193601126100aa57606091815191818352816020840152820152f35b5080fd5b8383346100aa576020928360031936011261024857803567ffffffffffffffff8111610244576100e19036908301610c63565b825163a9ee45c160e01b8082529091826100fd82868301610e2e565b0392858173a1b9be3dec8612e727564baf46387c4366912d749581875afa90811561023a5791869161014493899161021d575b505193825193849283928352888301610e2e565b0381865afa908115610213579160ff8880959361018f97958a916101e6575b5001518751631e74a30360e01b81529485019283521660ff166020820152919384928391829160400190565b03915afa9283156101db57926101a7575b5051908152f35b9091508281813d83116101d4575b6101bf8183610c41565b810103126101cf575190836101a0565b600080fd5b503d6101b5565b8251903d90823e3d90fd5b6102069150893d8b1161020c575b6101fe8183610c41565b810190610de9565b8b610163565b503d6101f4565b85513d88823e3d90fd5b6102349150833d851161020c576101fe8183610c41565b8a610130565b86513d89823e3d90fd5b8380fd5b8280fd5b839150346100aa5761025d36610cba565b5092338352602093828552610276828520541515610e5a565b815161029f82519187818186019461028f818388610cec565b81016003815203019020546112b9565b60018552600a8652828520938351878185516102bc818388610cec565b81016003815203019020548652600587528386209460078601805480158015906104fe575b6102ea90611086565b600888018054909290156104e457505080546000198101919082116104d157555b84516330bf93dd60e01b81529588878061032788878301610e2e565b03818b73f1a9564396f0d27fc61ba2e0e0938dc0995d42235af19687156104c7578897610498575b50678ac7230489e80000968781029781890414901517156104855760058101805490600a82018092116104725791600a91600194935501610391888254610d0f565b90550161039f868254610d0f565b90556103d4878551621b999d60ea1b8152886003820152602360018060a01b0391205416938651809381928851928391610cec565b810160038152030190205490823b1561046e5790602487928387519586948593630ad4782960e31b85528401525af1801561046457849392918691610449575b50506104407fbde6b358268687a57a765fca97482d5e6bdf1d9c90394a7cc6de65ae723f9b0191610ea5565b91519480a38152f35b6104569192939450610bfa565b610244579082918487610414565b83513d87823e3d90fd5b8680fd5b634e487b7160e01b8a526011855260248afd5b634e487b7160e01b885260118352602488fd5b9096508881813d83116104c0575b6104b08183610c41565b810103126101cf5751958961034f565b503d6104a6565b86513d8a823e3d90fd5b634e487b7160e01b895260118452602489fd5b600019820192509082116104d1575542600987015561030b565b50600888015415156102e1565b828434610532576020366003190112610532575061052b602092356110d2565b9051908152f35b80fd5b839150346100aa5761054636610cba565b509233835260209382855261055f828520541515610e5a565b815181519361058b87840195610576818589610cec565b830192888160039586815203019020546112b9565b60018652600a8752838620948451888186516105a8818387610cec565b81018681520301902054875260058852848720956007870180548581108015906107ae575b6105d690611086565b600889019186835411600014610794575050805460021981019190821161047257555b85516330bf93dd60e01b81529689888061061589888301610e2e565b03818c73a1b9be3dec8612e727564baf46387c4366912d745af197881561078a57899861075b575b50678ac7230489e800009788810298818a0414901517156104d15760058101805490601e82018092116107485792600a6106c295936001938e9655016106848b8254610d0f565b905501610692898254610d0f565b90558651621b999d60ea1b81528986820152602360018060a01b0391205416948751809481938951928391610cec565b8201908152030190205490823b1561046e5790602487928387519586948593630ad4782960e31b85528401525af180156104645784939291869161072d575b50506104407f3bac9bae425cf10b911f766ffeda5040c2214cb2771df506a19a97c67a50100991610ea5565b61073a9192939450610bfa565b610244579082918487610701565b634e487b7160e01b8b526011865260248bfd5b9097508981813d8311610783575b6107738183610c41565b810103126101cf5751968a61063d565b503d610769565b87513d8b823e3d90fd5b6002198201925090821161047257554260098801556105f9565b5060088901548611156105cd565b828434610532576020366003190112610532575061052b60209235610ed2565b919050346102485760208060031936011261024457823567ffffffffffffffff8111610a855761080f9036908501610c63565b91338552838252610824818620541515610e5a565b61082d83610d32565b15610a53578051621b999d60ea1b815260038082018790526023909120548251855185870194926001600160a01b031691908690829061086e81838a610cec565b810186815203019020548852600585528682892001549660018801809811610a4057878952600686526002838a200180549060018201809211610a2d57908a929155835187818a516108c181838c610cec565b810188815203019020548252600587528881858420015588825260068752848483200154845188818b516108f681838d610cec565b810189815203019020548352600588526006858420015588825260068752848483200154845188818b5161092b81838d610cec565b8101898152030190205483526005885260078584200155835187818a5161095381838c610cec565b810188815203019020548252600587524260098584200155835187818a5161097c81838c610cec565b8101888152030190205490833b15610248576024908386519586948593630ad4782960e31b85528401525af18015610a2357610a04575b50916109dd93916109cd9351809481938851928391610cec565b8201908152030190205491610ea5565b7f6b95a864619128204031150d0af28bc7f123caefdc26282fb432d0de806c2dc98480a480f35b916109cd939197610a186109dd9694610bfa565b9791935091936109b3565b82513d8a823e3d90fd5b634e487b7160e01b8b526011835260248bfd5b634e487b7160e01b895260119052602488fd5b5162461bcd60e51b81529283015250600e60248201526d04e6f7420656e6f756768206578760941b6044820152606490fd5b8480fd5b8383346100aa576020928360031936011261024857803567ffffffffffffffff811161024457610abc9036908301610c63565b825163a9ee45c160e01b808252909182610ad882868301610e2e565b0392858173f1a9564396f0d27fc61ba2e0e0938dc0995d42239581875afa90811561023a57918691610b1e93899161021d57505193825193849283928352888301610e2e565b0381865afa908115610213579160ff88809593610b6897958a916101e6575001518751631e74a30360e01b81529485019283521660ff166020820152919384928391829160400190565b03915afa9283156101db578093610b82575b505051908152f35b909192508382813d8311610bad575b610b9b8183610c41565b81010312610532575051908380610b7a565b503d610b91565b8284346105325760203660031901126105325782359067ffffffffffffffff82116105325750610bec602093610bf192369101610c63565b610d32565b90519015158152f35b67ffffffffffffffff8111610c0e57604052565b634e487b7160e01b600052604160045260246000fd5b610180810190811067ffffffffffffffff821117610c0e57604052565b90601f8019910116810190811067ffffffffffffffff821117610c0e57604052565b81601f820112156101cf5780359067ffffffffffffffff8211610c0e5760405192610c98601f8401601f191660200185610c41565b828452602083830101116101cf57816000926020809301838601378301015290565b60406003198201126101cf576004359067ffffffffffffffff82116101cf57610ce591600401610c63565b9060243590565b60005b838110610cff5750506000910152565b8181015183820152602001610cef565b91908201809211610d1c57565b634e487b7160e01b600052601160045260246000fd5b60405190805191610d8060208281809481870197610d5181838b610cec565b810160038152030190205494600095865260058252600460408720015494604051938492839251928391610cec565b810160038152030190205483526005815260056040842001549060018301808411610dd557845260069052604083206001015411159081610dca575b50610dc45790565b50600190565b9050600a1138610dbc565b634e487b7160e01b85526011600452602485fd5b908160409103126101cf5760405190604082019082821067ffffffffffffffff831117610c0e5760209160405280518352015160ff811681036101cf57602082015290565b60409160208252610e4e8151809281602086015260208686019101610cec565b601f01601f1916010190565b15610e6157565b606460405162461bcd60e51b815260206004820152602060248201527f4d6f6469666965727346616365743a206e6f742064656c656761746520454f416044820152fd5b610ebd90602060405192828480945193849201610cec565b810103902090565b91908203918211610d1c57565b6000908152602060058152604082209160405191610eef83610c24565b60018060a01b0391828554168452600192600186015416828501526002850160405193828254928360011c9360018116801561107c575b8786108114611068578589528896959493929181156110445750600114611007575b50505050610f5892500382610c41565b60408201526003820154606082015260048201546080820152600582015460a082015260068201549160c082019280845260078201549060e08401938285526008840154610100820152610160600b60098601549586610120850152600a810154610140850152015491015281146110005750610fd86107089142610ec5565b0490610fe5828251610d0f565b835111610ff25750505190565b610ffd925051610d0f565b90565b9250505090565b815285812095935091905b81831061102c575050610f58935082010138808080610f48565b85548784018501529485019486945091830191611012565b9350505050610f5894925060ff191682840152151560051b82010138808080610f48565b634e487b7160e01b84526022600452602484fd5b94607f1694610f26565b1561108d57565b60405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820686561727420706f696e74730000000000000000006044820152606490fd5b6000908152602090600582526040812091604051906110f082610c24565b83546001600160a01b03908116835260018581015490911683830152604051600286018054919392869280821c929080831680156112af575b868510811461129b578488528795949392918115611279575060011461123c575b50505061115992500382610c41565b60408201526003830154606082015260048301546080820152600583015460a08201526111cc60068401549360c0830194855260078101549260e081019384526008820154610100820152610160600b60098401549384610120850152600a810154610140850152015491015242610ec5565b610708936111de858304809451610d0f565b9051116111ec575050905090565b83820291808304851490151715611228579061120791610ec5565b8203918211611214575090565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b83526011600452602483fd5b88528488209492508791905b818310611261575050611159935082010138808061114a565b85548784018501529485019486945091830191611248565b9250505061115994925060ff191682840152151560051b82010138808061114a565b634e487b7160e01b8a52602260045260248afd5b93607f1693611129565b8060005260056020526112d0604060002091610ed2565b600782015560094291015556fea26469706673582212208edc47d14e54a2c6b14d73df90895e823d31f8462027a8a7e8b54f5e1f6d223364736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "playDiceEvent(string,uint256)": {
        "notice": "token preDistribution functions"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16359,
        "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)16312_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(EquipmentType)16324": {
        "encoding": "inplace",
        "label": "enum EquipmentType",
        "numberOfBytes": "1"
      },
      "t_enum(UserType)16330": {
        "encoding": "inplace",
        "label": "enum UserType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(DelegateEOA)16184_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DelegateEOA)",
        "numberOfBytes": "32",
        "value": "t_struct(DelegateEOA)16184_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_struct(User)16175_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)16175_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)10_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[10])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)10_storage"
      },
      "t_mapping(t_uint256,t_struct(ElementaItem)16239_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ElementaItem)",
        "numberOfBytes": "32",
        "value": "t_struct(ElementaItem)16239_storage"
      },
      "t_mapping(t_uint256,t_struct(ElementaNFT)16218_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ElementaNFT)",
        "numberOfBytes": "32",
        "value": "t_struct(ElementaNFT)16218_storage"
      },
      "t_mapping(t_uint256,t_struct(ElementaToken)16244_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ElementaToken)",
        "numberOfBytes": "32",
        "value": "t_struct(ElementaToken)16244_storage"
      },
      "t_mapping(t_uint256,t_struct(MysteryBox)16223_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MysteryBox)",
        "numberOfBytes": "32",
        "value": "t_struct(MysteryBox)16223_storage"
      },
      "t_mapping(t_uint256,t_struct(levelInfo)16193_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct levelInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(levelInfo)16193_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)16312_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 16257,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "contracts",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_string_memory_ptr,t_address)"
          },
          {
            "astId": 16262,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "users",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_string_memory_ptr,t_struct(User)16175_storage)"
          },
          {
            "astId": 16264,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "globalUserIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16268,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "userIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_string_memory_ptr,t_uint256)"
          },
          {
            "astId": 16273,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "delegateEOAs",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(DelegateEOA)16184_storage)"
          },
          {
            "astId": 16278,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "elementaNFTs",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_struct(ElementaNFT)16218_storage)"
          },
          {
            "astId": 16283,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "levelInfos",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(levelInfo)16193_storage)"
          },
          {
            "astId": 16287,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "isDelegateEOA",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 16292,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "elementaItems",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(ElementaItem)16239_storage)"
          },
          {
            "astId": 16298,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "equipItems",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_array(t_uint256)10_storage)"
          },
          {
            "astId": 16303,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "elementaToken",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(ElementaToken)16244_storage)"
          },
          {
            "astId": 16306,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "oraklVRF",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(OraklVRF)16253_storage"
          },
          {
            "astId": 16311,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "mysteryBoxes",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_struct(MysteryBox)16223_storage)"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(DelegateEOA)16184_storage": {
        "encoding": "inplace",
        "label": "struct DelegateEOA",
        "members": [
          {
            "astId": 16177,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "userIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16179,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "userId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 16181,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "connectAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16183,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "isOwnNFT",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ElementaItem)16239_storage": {
        "encoding": "inplace",
        "label": "struct ElementaItem",
        "members": [
          {
            "astId": 16226,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "equipmentType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(EquipmentType)16324"
          },
          {
            "astId": 16228,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "itemId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16230,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 16232,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "svgUri",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 16234,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "animateColors",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 16236,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "stopColor",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 16238,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "animateDuration",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(ElementaNFT)16218_storage": {
        "encoding": "inplace",
        "label": "struct ElementaNFT",
        "members": [
          {
            "astId": 16195,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16197,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "delegateAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16199,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "nickName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 16201,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "grade",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16203,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "level",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16205,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "exp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16207,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "heartMax",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16209,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "heartPoint",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 16211,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "plusHeartPoint",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 16213,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "updateHeartTime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 16215,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "elementaPoint",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 16217,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "originRandomValue",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(ElementaToken)16244_storage": {
        "encoding": "inplace",
        "label": "struct ElementaToken",
        "members": [
          {
            "astId": 16241,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "phaseMaxSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16243,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "mintedSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MysteryBox)16223_storage": {
        "encoding": "inplace",
        "label": "struct MysteryBox",
        "members": [
          {
            "astId": 16220,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "boxId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16222,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "uniqValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OraklVRF)16253_storage": {
        "encoding": "inplace",
        "label": "struct OraklVRF",
        "members": [
          {
            "astId": 16246,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "keyHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 16248,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "accId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 16250,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "callbackGasLimit",
            "offset": 8,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 16252,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "numWords",
            "offset": 12,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)16175_storage": {
        "encoding": "inplace",
        "label": "struct User",
        "members": [
          {
            "astId": 16161,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "userId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 16163,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "nftId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16165,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "reciveAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16167,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "delegateEOA",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 16170,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "userType",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(UserType)16330"
          },
          {
            "astId": 16172,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "refferalId",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 16174,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "refferalCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(levelInfo)16193_storage": {
        "encoding": "inplace",
        "label": "struct levelInfo",
        "members": [
          {
            "astId": 16186,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16188,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "requireExp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16190,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "levelUserCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16192,
            "contract": "contracts/elementa/botMiniGameFacet.sol:botMiniGameFacet",
            "label": "heartMax",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}